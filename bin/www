#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('shoppingmall:server');
var http = require('http');
var https = require('https'); //보안통신
var fs = require('fs');
var path = require('path');

/**
 * Get httpPort & httpsPort from environment and store in Express.
 */

var httpPort = normalizePort(process.env.HTTP_PORT || '80');
app.set('httpPort', httpPort);

var httpsPort = normalizePort(process.env.HTTPS_PORT || '443');
app.set('httpsPort', httpsPort);

/**
 * Create HTTP server.
 */

var key = fs.readFileSync(path.join(__dirname, 'site.key')).toString(); //private키
var cert = fs.readFileSync(path.join(__dirname, 'site.crt')).toString(); //인증서 (public 키 포함)

var options = {
  "key" : key,
  "cert" : cert
};

debug("key: " + key);
debug("cert: " + cert);


var server = http.createServer(app);
var secureServer = https.createServer(options, app);
/**
 * Listen on provided httpPort & httpsPort, on all network interfaces.
 */

server.listen(httpPort);
server.on('error', onError);
server.on('listening', onListening);


secureServer.listen(httpsPort);
secureServer.on('error', onError);
secureServer.on('listening', onListening);

/**
 * Normalize httpPort & httpsPort into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // httpPort or httpsPort number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP & HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind;
  if (this === server) {
    bind = typeof httpPort === 'string'
        ? 'Pipe ' + httpPort
        : 'Port ' + httpPort;
  } else {
    bind = typeof httpsPort === 'string'
        ? 'Pipe ' + httpsPort
        : 'Port ' + httpsPort;
  }


  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = this.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : ((this === server) ? 'httpPort ': 'httpsPort ') + addr.port;
    debug('Listening on ' + bind);

}
